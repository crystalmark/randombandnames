"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const BeautifulDom = require('beautiful-dom');
const specialChars = "!@#$^&%*()+=-[]\/{}|:<>?,.'\"";
exports.handler = async (event = {}) => {
    var randomUrl = 'https://en.wikipedia.org/wiki/Special:Random';
    const response = await node_fetch_1.default(randomUrl);
    const body = await response.text();
    const dom = new BeautifulDom(body);
    const paragraphs = dom.getElementsByTagName("p");
    var bandnames = new Array();
    var counter = 0;
    while (bandnames.length < 5 && counter++ < 5) {
        const sentences = flatten(paragraphs
            .map((paragraph) => {
            return clean(paragraph.innerHTML);
        })
            .map((paragraph) => {
            return separateSentences(paragraph);
        }))
            .map((sentence) => {
            return firstWords(sentence);
        })
            .map((sentence) => {
            return addThe(sentence);
        })
            .map((sentence) => {
            return capitalize(sentence);
        }).filter((sentence) => {
            return sentence.length > 2;
        });
        bandnames = bandnames.concat(sentences);
    }
    return { "isBase64Encoded": false, headers: {}, statusCode: 200, body: JSON.stringify(bandnames.slice(0, 5)) };
};
function clean(text) {
    return text.replace(/<\/?[^>]+(>|$)/g, "").replace("/&#..;/g", "");
}
function separateSentences(text) {
    return text.split("\. ").map((t) => t.trim()).filter((t) => t.length > 1);
}
function flatten(array) {
    var flatarray = new Array();
    array.forEach(element => flatarray = flatarray.concat(element));
    return flatarray;
}
function firstWords(sentence) {
    const words = sentence.split(" ");
    var count = 1;
    if (words.length > 2) {
        if (words.length <= 5) {
            count = Math.random() * words.length;
        }
        else {
            count = Math.random() * 5;
        }
        return words.slice(0, count).join(" ");
    }
    else {
        return sentence;
    }
}
function addThe(sentence) {
    if (sentence.toLowerCase().startsWith("the ")) {
        if (Math.random() < 0.5) {
            return sentence.substring(4);
        }
        else {
            return sentence;
        }
    }
    else {
        if (Math.random() < 0.2) {
            return "The " + sentence;
        }
        else {
            return sentence;
        }
    }
}
function capitalize(sentence) {
    return (sentence.toLowerCase().replace(/(?:^|\s)\S/g, function (a) { return a.toUpperCase(); }));
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFuZG5hbWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFuZG5hbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQStCO0FBQy9CLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUU5QyxNQUFNLFlBQVksR0FBRywrQkFBK0IsQ0FBQztBQUV4QyxRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsUUFBYSxFQUFFLEVBQWtCLEVBQUU7SUFHN0QsSUFBSSxTQUFTLEdBQUcsOENBQThDLENBQUM7SUFDL0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxvQkFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3ZDLE1BQU0sSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25DLE1BQU0sR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5DLE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVqRCxJQUFJLFNBQVMsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO0lBQ3BDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztJQUVoQixPQUFRLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBQztRQUMxQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsVUFBVTthQUMvQixHQUFHLENBQUUsQ0FBQyxTQUFpQyxFQUFFLEVBQUU7WUFDeEMsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQzthQUNELEdBQUcsQ0FBRSxDQUFDLFNBQWlCLEVBQUUsRUFBRTtZQUN4QixPQUFPLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO2FBQ0YsR0FBRyxDQUFFLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1lBQ3ZC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QUUsR0FBRyxHQUFHLEVBQUM7WUFDckIsT0FBTyxNQUFNLEdBQUMsUUFBUSxDQUFDO1NBQzFCO2FBQ0k7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNuQjtLQUNKO0FBQ0wsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFFLFFBQWlCO0lBQ2xDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxVQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEcsQ0FBQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5jb25zdCBCZWF1dGlmdWxEb20gPSByZXF1aXJlKCdiZWF1dGlmdWwtZG9tJyk7XG5cbmNvbnN0IHNwZWNpYWxDaGFycyA9IFwiIUAjJF4mJSooKSs9LVtdXFwve318Ojw+PywuJ1xcXCJcIjtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSA9IHt9KSA6IFByb21pc2UgPGFueT4gPT4ge1xuXG5cbiAgICB2YXIgcmFuZG9tVXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwZWNpYWw6UmFuZG9tJztcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJhbmRvbVVybClcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIGNvbnN0IGRvbSA9IG5ldyBCZWF1dGlmdWxEb20oYm9keSk7XG5cbiAgICBjb25zdCBwYXJhZ3JhcGhzID0gZG9tLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicFwiKTtcblxuICAgIHZhciBiYW5kbmFtZXMgPSBuZXcgQXJyYXk8U3RyaW5nPigpO1xuICAgIHZhciBjb3VudGVyID0gMDtcblxuICAgIHdoaWxlICggYmFuZG5hbWVzLmxlbmd0aCA8IDUgJiYgY291bnRlcisrIDwgNSl7XG4gICAgICAgIGNvbnN0IHNlbnRlbmNlcyA9IGZsYXR0ZW4ocGFyYWdyYXBoc1xuICAgICAgICAgICAgLm1hcCggKHBhcmFncmFwaDogeyBpbm5lckhUTUw6IHN0cmluZzsgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGVhbihwYXJhZ3JhcGguaW5uZXJIVE1MKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWFwKCAocGFyYWdyYXBoOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VwYXJhdGVTZW50ZW5jZXMocGFyYWdyYXBoKTtcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLm1hcCggKHNlbnRlbmNlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3RXb3JkcyhzZW50ZW5jZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm1hcCggKHNlbnRlbmNlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkVGhlKHNlbnRlbmNlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWFwKCAoc2VudGVuY2U6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYXBpdGFsaXplKHNlbnRlbmNlKTtcbiAgICAgICAgICAgIH0pLmZpbHRlcigoc2VudGVuY2U6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZW50ZW5jZS5sZW5ndGggPiAyO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDtcblxuICAgICAgICBiYW5kbmFtZXMgPSBiYW5kbmFtZXMuY29uY2F0KHNlbnRlbmNlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgXCJpc0Jhc2U2NEVuY29kZWRcIjogZmFsc2UsIGhlYWRlcnM6IHt9LCBzdGF0dXNDb2RlOiAyMDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJhbmRuYW1lcy5zbGljZSgwLDUpKSB9O1xufTtcblxuZnVuY3Rpb24gY2xlYW4odGV4dDogc3RyaW5nKXtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC88XFwvP1tePl0rKD58JCkvZywgXCJcIikucmVwbGFjZShcIi8mIy4uOy9nXCIsIFwiXCIpO1xufVxuXG5mdW5jdGlvbiBzZXBhcmF0ZVNlbnRlbmNlcyh0ZXh0IDogc3RyaW5nKXtcbiAgICByZXR1cm4gdGV4dC5zcGxpdChcIlxcLiBcIikubWFwKCh0OiBzdHJpbmcpID0+IHQudHJpbSgpKS5maWx0ZXIoKHQ6IHN0cmluZykgPT4gdC5sZW5ndGggPiAxKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihhcnJheSA6IEFycmF5PGFueT4pe1xuICAgIHZhciBmbGF0YXJyYXkgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuICAgIGFycmF5LmZvckVhY2goIGVsZW1lbnQgPT4gZmxhdGFycmF5ID0gZmxhdGFycmF5LmNvbmNhdChlbGVtZW50KSk7XG4gICAgcmV0dXJuIGZsYXRhcnJheTtcbn1cblxuZnVuY3Rpb24gZmlyc3RXb3JkcyhzZW50ZW5jZSA6IHN0cmluZyl7XG4gICAgY29uc3Qgd29yZHMgPSBzZW50ZW5jZS5zcGxpdChcIiBcIik7XG4gICAgdmFyIGNvdW50ID0gMTtcbiAgICBpZiAoIHdvcmRzLmxlbmd0aCA+IDIpe1xuICAgICAgICBpZiAoIHdvcmRzLmxlbmd0aCA8PSA1ICkge1xuICAgICAgICAgICAgY291bnQgPSBNYXRoLnJhbmRvbSgpKndvcmRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvdW50ID0gTWF0aC5yYW5kb20oKSo1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3b3Jkcy5zbGljZSgwLCBjb3VudCkuam9pbihcIiBcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VudGVuY2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRUaGUoc2VudGVuY2UgOiBzdHJpbmcpe1xuICAgIGlmICggc2VudGVuY2UudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKFwidGhlIFwiKSl7XG4gICAgICAgIGlmICggTWF0aC5yYW5kb20oKSA8IDAuNSl7XG4gICAgICAgICAgICByZXR1cm4gc2VudGVuY2Uuc3Vic3RyaW5nKDQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNlbnRlbmNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIGlmICggTWF0aC5yYW5kb20oKSA8IDAuMil7XG4gICAgICAgICAgICByZXR1cm4gXCJUaGUgXCIrc2VudGVuY2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2VudGVuY2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUgKHNlbnRlbmNlIDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChzZW50ZW5jZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyg/Ol58XFxzKVxcUy9nLCBmdW5jdGlvbihhKSB7IHJldHVybiBhLnRvVXBwZXJDYXNlKCk7IH0pKTtcbn07Il19